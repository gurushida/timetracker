.TH TT 1
.SH NAME
.B tt
- time tracking utility that keeps track of things with git
.SH SYNOPSIS
.B tt
<command> [<args>]
.SH DESCRIPTION
This utility allows you to do simple time tracking so that you can know at any time
what is your (worked time / expected work time) ratio. It works on the assumptions that you
work from Monday to Friday, 7.5 hours a day, and that you have 25 days of vacation
per year (see \fBinit\fR for changing default values). It supports adding public holidays (with the possibility to declare half-days),
declaring vacation days, days you stay home because you are sick and days you stay home
because you take care of a sick child. In case you wonder how all these days off are even
possible, this utility has been designed in a scandinavian country ;-)

You can report worked time by starting and stopping a stopwatch as well as directly declaring time
for a given day.

Because time reporting is a matter of trust, this utility versions its internal data with \fBgit\fR to
keep the full history of all the time tracking operations you do once you start tracking. If you do
manual modifications on the bookkeeping files of the utility, you will have to commit those
changes manually before you can use \fBtt\fR again to report worked time or declare holiday,
vacation, etc.

Even though this git repository is created as a local one, you are free to
push it to a remote location, for instance if you want to do your time tracking across several
machines. In this case, it is up to you to use \fBtt git pull\fR and \fBtt git push\fR to keep things in sync
with your remote repository.

.SH COMMANDS
.TP
.B help
Prints some basic help.

.TP
\fBinit\fR <start> [--vacations=<N>]
Before you can do any time tracking, you need to initialize the time tracker with this command.
<start> is the date to start time tracking from in dd/mm/yyyy format. This date will be the
reference point when it comes to calculating the balance between the time you should have worked
and the worked time that you have reported. If --vacations is specified, <N> is an integer
indicating the number of vacation days allowed per year. The default is 25 days. This value
is only used a safety net to prevent you from accidentally registering too many
vacation days on a given year.


This command creates a bookkeeping directory named .timetracker located in your home directory.
This directory is then turned into a git repository by invoking \fBgit init\fR to allow time
tracking operations to be tracked themselves as git commits to ensure traceability.

.TP
.B start
Starts the clockwatch. You need use \fBstop\fR to stop it and report the interval as worked time.

.TP
\fBstop\fR [--force] [description]
Stops the clockwatch and reports the elapsed time as worked time. The optional description
is only meant to be used as a hint for humans. If the elapsed time is larger than 24 hours,
the program will abort. If the elapsed time is larger than 10 hours or if the clockwatch is not
stopped on the same day it was started, the program will abort unless you have used --force to
confirm that this was not a mistake. Note that the time actually elapsed is calculated correctly
even if you have changed time zones of if a daylight saving change has occurred while the
clockwatch was running.

.TP
\fBadd\fR [--force] <day> <duration> [description]
Registers worked time for a given day. <day> must be given in dd/mm/yyyy format.
<duration> must be given in the hours:minutes format. The optional description
is only meant to be used as a hint for humans. As for the \fBstop\fR command, you cannot
report a duration larger than 24 hours and you need to use --force if the duration is
larger than 10 hours.

.TP
\fBholiday\fR [--half] <day> [description]
Registers a public holiday, i.e. a day you are not supposed to work at all. If --half is used,
the holiday is marked as a half-day where you are supposed to work half the normal time.
<day> must be given in dd/mm/yyyy format. The optional description
is only meant to be used as a hint for humans.

.TP
\fBvacation\fR <day>
Registers a vacation day, given in dd/mm/yyyy format. Note that if the day is also registered
as a half-holiday, the program will automatically take it into account and count it as 0.5 vacation
instead of a full day. The program will abort if the day is already registered as a vacation day,
is a week-end day, is a full public holiday or would exceed the yearly limit of vacation days.

.TP
\fBsick\fR <day>
Registers a day you stay home sick in dd/mm/yyyy format. The program will abort if the day
is already registered as a sick day, a sick child day, a week-end day or a full public holiday.

.TP
\fBchild\fR <day>
Registers a day you stay home to take care of a sick child in dd/mm/yyyy format. The program
will abort if the day is already registered as a sick day, a sick child day, a week-end day or a
full public holiday.

.TP
\fBreport\fR [-v|--verbose] [<type>] [<end>]
Prints a summary of the time tracked up until now or <end> if specified in dd/mm/yyyy format.
If -v is specified, the comments for a day, if any, are printed after the report for this day.
<type> can have one of the following values:

.ti 1.6i
week\0\0\0\0Prints the current week (default)
.ti 1.6i
month\0\0\0Prints the current month
.ti 1.6i
year\0\0\0\0Prints the current year
.ti 1.6i
all\0\0\0\0\0Prints everything since the time tracking began

Legend:
.ti 1.6i
---\0\0\0\0\0Hours due and not worked
.ti 1.6i
###\0\0\0\0\0Hours due and worked
.ti 1.6i
+++\0\0\0\0\0Overtime hours (any time worked past the expected duration for the day)


.TP
\fBremove\fR [--force] <type> <day>
Removes the data registered for the given <day> in dd/mm/yyyy format.
The program will ask for confirmation unless --force is used.
<type> can have the following values:


.ti 1.6i
holiday\0\0\0Removes the day, whether it is a full or a half holiday
.ti 1.6i
vacation\0\0Removes the given vacation day
.ti 1.6i
sick\0\0\0\0\0\0Removes the given sick day
.ti 1.6i
child\0\0\0\0\0Removes the given sick child day
.ti 1.6i
worked\0\0\0\0Removes all the worked time reported for the given day

.TP
\fBgit\fR [<args>]
This is a shortcut for executing the given git command from the bookkeeping
directory. For instance, \fBtt git log\fR will list the modifications done since you
invoked the \fBinit\fR command.

